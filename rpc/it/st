#!/usr/bin/env expect
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

### ------------------------------------------------------------------
### System test for `m0rpcping'.
###
### Assumes that `m0tr' kernel module is already inserted.
### ------------------------------------------------------------------

proc die {msg} {
    global argv0
    send_error "*ERROR* $argv0: m0rpcping $msg\n"
    exit 1
}

proc wait_for {sid name} {
    expect -i $sid eof {} FATAL {die "$name has failed"
    } timeout {die "$name timeout"}
    set rc [lindex [wait -i $sid] 3]
    if {$rc != 0} {die "$name exitcode $rc"}
}

set timeout 30
set prog [file join [file dirname $argv0] m0rpcping]

# Start server:
spawn sudo $prog -s -v
set server $spawn_id

# Check that the server is ready:
expect -i $server -re {Press Enter to terminate.*#+\r*\n$} {
} FATAL {die "server has failed"} timeout {die "server timeout"
} eof {die "server has quit unexpectedly"}

# Start client:
spawn sudo $prog -t300 -n2 -v
set client $spawn_id

# Wait till client terminates:
wait_for $client "client"

# Send '\n' to server and wait till it quits:
send -i $server "\n"
wait_for $server "server"

# Local Variables:
# mode: tcl
# End:
