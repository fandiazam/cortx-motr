#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


import argparse
from subprocess import run, PIPE, check_output
import sys
import re
import os
from pathlib import Path

bt_ref_corrupt_file = '/opt/seagate/cortx/motr/common/core-traces'
temp_file = '/tmp/temp_data'
temp_file_journal = '/tmp/temp_journal'

bt_delimiter = '(gdb)'
journal_delimiter = ['m0_arch_panic','m0_thread_trampoline']
journal_func_keywords = ['_be_', '_btree_']
panic_str = 'm0_arch_panic'
core_type = 'm0d'

msg_corruption_found = 'There are signs of known data corruption.'
msg_no_corruption_found = 'No known data corruption.'

# MAX_DEPTH - Max depth to check for corruption
MAX_DEPTH = 4

# MAX_BT_PRINT - Max back traces to print after m0_panic
MAX_BT_PRINT = 7


def send_command(cmd):
    output = check_output(cmd, shell=True, encoding='ascii').split('\n')
    return output


# Parse backtrace line and return parsed line
def parse_bt_line(line:str) -> str:
    regex_list = [r"\([^)]*\)",r"0[xX][0-9a-fA-F]+",r"(\#\d+)|( in)|( at)|( from)", r"(\<)|(\>)", r" +"]
    repl = ''

    if bt_delimiter not in line:
        if 'sigsegv' in line:
            data = re.findall(r'\((.*?)\)',line)
            line = line.replace("sigsegv", "sigsegv_"+data[0])

        line = line.replace('signal handler ', 'signal_handler_')

        for regex in regex_list:
            if regex_list.index(regex) == 4:
                    repl = ' '
            line = re.sub(regex, repl, line).strip()

        return line
    else:
        return None


def read_ref_bt():
    parsed_data_dict = {}

    cmd = f"sed -n -e '/{panic_str}/,/(gdb)/p' {bt_ref_corrupt_file}"
    gdb_op = send_command(cmd)

    key = 0
    for line in gdb_op:
        if bt_delimiter in line:
                key = 0

        elif '#' in line:
            line = parse_bt_line(line)
            if not line:
                pass

            if key not in parsed_data_dict:
                parsed_data_dict[key] = []

            # Append the string if it is not already present
            val = line.split()[0]
            if val not in parsed_data_dict[key]:
                parsed_data_dict[key].append(val)

            key += 1

    return parsed_data_dict


def update_max_depth(depth:int, bt_list:list) -> int:
    if 'signal_handler_called' in bt_list:
        depth += 2

    depth = min(depth + 2, len(bt_list))

    return depth


def check_corruption(bt_list:list, is_journal=False):
    if is_journal:
        # Check if journal logs contains '_be_' and '_btree_' related functions.
        # If yes, continue with checking for corruption, else ignore this bt.
        for bt in bt_list:
            if not any(item in bt for item in journal_func_keywords):
                return None

        ref_key = 0
        for data in bt_list:
            found = False
            for i in range(ref_key, len(ref_dict)):
                if data in ref_dict[i]:
                    found = True
                    break
            ref_key = i
            if not found:
                return None

    else:
        max_depth = update_max_depth(MAX_DEPTH, bt_list)

        for i in range(max_depth):
            if bt_list[i] not in ref_dict[i]:
                return None

    return bt_list


def check_corruption_in_bt_file(file_name:str):
    corrupt_list = []
    cmd = f"sed -n -e '/(gdb) #/,/(gdb)/p' {file_name} | sed -n -e '/{panic_str}/,/(gdb)/p'"
    gdb_op = send_command(cmd)

    bt_func_list = []
    for line in gdb_op:
        if bt_delimiter in line:
            if bt_func_list:
                corrupt_list = check_corruption(bt_func_list)
                if corrupt_list:
                    break
            bt_func_list = []

        elif '#' in line:
            line = parse_bt_line(line)
            if line:
                bt_func_list.append(line.split()[0])

    return corrupt_list


def check_corruption_in_core_files():
    # Get backtraces from core files
    m0d_core_files = [str(f) for f in Path('/var/motr').glob('**/core.*') if f.is_file() and 'm0d' in str(f)]
    if not m0d_core_files:
        return None

    for file in m0d_core_files:
        with open(temp_file, 'a+') as f:
            cmd=f'gdb /usr/bin/m0d {file}'
            cmd_list = cmd.split()
            run(cmd_list, input="bt\nquit\n", stdout=f, stderr=f, encoding='ascii')

    corrupt_list = check_corruption_in_bt_file(temp_file)
    os.system(f"rm -f {temp_file}")

    return corrupt_list

def parse_journal_data(line:str):
    data_str = ''
    if line:
        data = re.findall(r'\((.*?)\)',line)
        if data:
            data_str = data[0].split('+0x', 1)[0]

    return data_str


def check_corruption_in_journal_logs(journal_file:str):
    cmd = f"sed -n -e '/{journal_delimiter[0]}/,/{journal_delimiter[1]}/p' {journal_file}"
    output = send_command(cmd)

    data_list = [parse_journal_data(line).strip() for line in output]

    corrupt_list = []

    start = False
    for data in data_list:
        if data == journal_delimiter[0]:
            bt_func_list = [data]
            start = True

        elif data == journal_delimiter[1]:
            bt_func_list.append(data)
            corrupt_list = check_corruption(bt_func_list, True)
            if corrupt_list:
                break
            start = False

        elif start and data:
            bt_func_list.append(data)

    return corrupt_list


def print_result(msg):
    print('\n',"*"*(len(msg)+6),f'\n    {msg}\n',"*"*(len(msg)+6),'\n')


def print_backtraces(bt_list):
    print("  Corruption Backtraces \n", "-"*23)
    max_bt = update_max_depth(MAX_BT_PRINT, bt_list)
    for i in range(max_bt):
        print(f' {bt_list[i]}')
    print("","-"*23)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--journal', '-j', type=str, help='Input Journal File')
    parser.add_argument('--reportbug', '-r', type=str, help='Input m0reportbug.txt File')
    args = parser.parse_args()

    corrupt_list = None

    # Read reference backtrace file
    global ref_dict
    ref_dict = read_ref_bt()

    print("\n  Checking for data corruption in...")

    if args.reportbug:
        print(f"  -> Backtrace from file {args.reportbug}", end ="...")
        corrupt_list = check_corruption_in_bt_file(args.reportbug)
        print("{}".format("Ok" if not corrupt_list else ""))

    if not corrupt_list:
        print(f"  -> Symlinks", end ="...")
        # Get list of m0trace files which are symlinks
        motr_paths = ['/var/motr', '/var/motr1', '/var/motr2']
        m0trace_symlinks = [str(f) for path in motr_paths if Path(path).exists() for f in Path(path).glob('**/m0trace.*') if f.is_symlink()]
        if m0trace_symlinks:
            print("Found")
            for link in m0trace_symlinks:
                print(f"       {link} is a symlink")
            print_result(msg_corruption_found)
            return
        print("Not found")

        # Check for data corruption from current core files
        print("  -> Current backtraces", end ="...")
        corrupt_list = check_corruption_in_core_files()
        print("{}".format("Ok" if not corrupt_list else ""))

    if not corrupt_list:
        print("  -> Current journal", end ="...")
        # Get current journal logs
        cmd = f'journalctl -b > {temp_file_journal}'
        os.system(cmd)
        # Check for data corruption in journal logs
        corrupt_list = check_corruption_in_journal_logs(temp_file_journal)
        print("{}".format("Ok" if not corrupt_list else ""))
        os.system(f'rm -f {temp_file_journal}')

    if not corrupt_list and args.journal:
        print(f"  -> Backtrace from file {args.journal}", end ="...")
        # Check for data corruption in journal
        corrupt_list = check_corruption_in_journal_logs(args.journal)
        print("{}".format("Ok" if not corrupt_list else ""))

    if corrupt_list:
        print_result(msg_corruption_found)
        print_backtraces(corrupt_list)

    else:
        print_result(msg_no_corruption_found)


if __name__ == '__main__':
    sys.exit(main())
