#!/bin/awk -f
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# Usage : utils/m0addb2dump <ADDB STOBS PATH> -f | awk -f utils/m0layout-from-addb
# e.g.
# run sns repair test to generate addb records.
#m0t1fs/linux_kernel/st/m0t1fs_sns_repair_mf.sh
#utils/m0addb2dump /var/motr/<test_path>/*/addb-stobs/o/100000000000000\:2 -f | awk -f utils/m0layout-from-addb
#
# This script generate IO map from ADDB records per thread and dump on console.
# Rows are frames and columns are target devices.
# [parity_group, unit_number] => data unit.
# <parity_group, unit_number> => parity unit.
# {parity_group, unit_number} => spare unit.
# BLUE units indicates unit on failed device
# and RED indicates alternate data location (spare) for failed device.
#
# NOTE :
#        - This script is for internal use only.
#        - It differentiates IO request per process.
#        - Any changes in ADDB2 post for M0_AVI_FS_IO_MAP
#          from m0t1fs/linux_kernel/file.c need to changes this script.
#          (req_state = $4, unit_type = $4, device_state = $9,
#          frame = $11, target = $13, group = $15, unit=$17, pid = $23)

BEGIN {
    matrix[0]=0;
    rows[0]=0;
    cols[0]=0;
    threads[0]=0;
    thread_counter=0;
    unit_format[0]="[%d, %d]";
    unit_format[1]="<%d, %d>";
    unit_format[2]="{%d, %d}";
    FAILED_UNIT_FMT="\033[1;34m%10s\033[0m";
    SPARE_UNIT_FMT="\033[1;31m%10s\033[0m";
    FMT="%10s";
}

/m0t1fs-io-map/{
    # todo  XXX  : Can be better logic to get values from line
    #              independent of column number.
    unit_type=$7; sub(/,/, "", unit_type);
    req_type=$4; sub(/,/, "", req_type);
    device_state=$9; sub(/,/, "", device_state);
    frame=$11; sub(/,/, "", frame);
    target=$13; sub(/,/, "", target);
    parity_group=$15; sub(/,/, "", parity_group);
    unit_number=$17; sub(/,/, "", unit_number);
    thread_id=$23; sub(/,/, "", thread_id);

    gotit=0;
    thr_pos=0;
    for (i=0; i<thread_counter; i++) {
        if (threads[i] == thread_id) {
           gotit=1;
           thr_pos=i;
       }
    }

    if (gotit != 1) {
	thr_pos=thread_counter;
        threads[thr_pos]=thread_id;
	rows[thr_pos]=0;
	cols[thr_pos]=0;
	thread_counter++;
    }

    val=sprintf(unit_format[unit_type], parity_group, unit_number);

    if ((device_state != 4) || (unit_type == 2))
        matrix[thread_id, frame, target]=val;
    else
        matrix[thread_id, frame, target]="#"val;

    if (rows[thr_pos]<frame) rows[thr_pos]=frame;
    if (cols[thr_pos]<target) cols[thr_pos]=target;
}

END {
    for(thr_pos=0; thr_pos<thread_counter; thr_pos++) {
        thr=threads[thr_pos];

        printf("==================== thread: %s ===================\n", thr);
        for (j=0; j <= cols[thr_pos]; j++)
            printf("%10s", "T"j)
        printf "\n"

        for (i=0; i <= rows[thr_pos]; i++) {
            printf("F%s", i)
            for (j=0; j <= cols[thr_pos]; j++) {
                if (match(matrix[thr,i,j], "#"))
                    printf(FAILED_UNIT_FMT, substr(matrix[thr,i,j], 2));
                else if (match(matrix[thr,i,j], "{"))
                    printf(SPARE_UNIT_FMT, matrix[thr,i,j]);
                else
                    printf(FMT, matrix[thr,i,j]);
            }
            printf "\n"
        }
    }
}
