#!/usr/bin/env perl
#
# Copyright (c) 2012-2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# This script recursively checks each header file in the specified directory to
# ensure correctness of include guards and reports duplicated guards if any.

# For detailed description and usage information please refer to the POD
# documentation at the end of file, after the __END__ marker.


# enable all features of Modern Perl, almost the same as done by Modern::Perl
# module, but doesn't require it as dependency
use 5.010;
use strict;
use warnings;
use autodie;


# check that all required external modules are available and display a hint to
# the user about how they can be installed using default package management
# system, if they are missing
BEGIN {

    my @required_modules = (
        {
            'name'       => 'File::Find::Rule',
            'debian-pkg' => 'libfile-find-rule-perl',
            'redhat-pkg' => 'perl-File-Find-Rule'
        },
        {
            'name'       => 'IO::All',
            'debian-pkg' => 'libio-all-perl',
            'redhat-pkg' => 'perl-IO-All'
        }
    );
    my $some_module_is_missing = 0;

    for my $m (@required_modules) {

        my $module = $m->{'name'};

        $module =~ s#::#/#g;
        $module .= '.pm';

        if (eval { require $module; 1; } ne 1) {
            $some_module_is_missing = 1;
            print "$m->{'name'} perl module is missing\n"
                  . "   It can be installed manually or using package management system:\n"
                  . "     debian based:  apt-get install $m->{'debian-pkg'}\n"
                  . "     red-hat based: yum install $m->{'redhat-pkg'}\n"
                  . "     manually:      cpanm $m->{'name'}\n\n";
        }
    }

    die "Please, install all required modules\n"
        if $some_module_is_missing;
}


# core modules
use Carp;
use Getopt::Long qw( :config no_ignore_case );
use Pod::Usage;
use English qw( -no_match_vars ); # avoids regex performance penalty

# external modules (not included into base perl distribution)
use File::Find::Rule;
use IO::All;


# global variables
my $root_dir_name;
my %cli_option;


sub build_missing_pragma_once_noisy_warning_for
{
    my $file_name = shift;

    return <<"END_PRAGMA_MSG"

        *** WARNING ***

$file_name:  no '#pragma once' statement is found
END_PRAGMA_MSG
}

sub build_include_guard_for
{
    my $file_name = shift;

    my $guard = uc $file_name;

    $guard =~ tr#/.#__#;
    $guard = "__MOTR_${guard}__";

    return $guard;
}

sub build_missing_include_guard_noisy_warning_for
{
    my $file_name = shift;

    my $guard_name = build_include_guard_for($file_name);

    return <<"END_GUARD_MSG"

        *** WARNING ***

$file_name:  no properly-named include guard is found

Please, check that mentioned header file uses include guard, which is correctly
named according to doc/coding-style rules, for example: $guard_name
END_GUARD_MSG
}

sub check_include_guards
{
    my $exclude_dirs = File::Find::Rule->directory
                                       ->name('extra-libs')
                                       ->prune
                                       ->discard;

    my $include_files = File::Find::Rule->file()
                                        ->not( File::Find::Rule->symlink() )
                                        ->name('*.h')
                                        ->not( File::Find::Rule->name('debug.h') )
                                        ->not( File::Find::Rule->name('config.h') );

    my @files = File::Find::Rule->or( $exclude_dirs, $include_files )
                                ->in( $root_dir_name );

    my %guard;

    FILE:
    for my $file (@files) {

        my $content = io($file)->slurp;

        my $missing_pragma_msg
            = $cli_option{'noisy'} ? build_missing_pragma_once_noisy_warning_for($file)
              : "WARNING: no '#pragma once' statement is found in '$file'\n";

        warn $missing_pragma_msg
            if $content !~ / ^ \s* \# \s* pragma \s+ once \s* $ /xms
           and $file ne 'xcode/xlist.h';

        my ($include_guard_name)
            = $content =~ /
                            ^ \s* \# \s* ifndef \s+ (__MOTR_ \w* _H__) \s* $
                          /xms;

        my $missing_guard_msg
            = $cli_option{'noisy'} ? build_missing_include_guard_noisy_warning_for($file)
              : "WARNING: no properly-named include guard is found in '$file'\n";

        warn $missing_guard_msg
            and
        next FILE
            if !defined $include_guard_name;

        push @{ $guard{ $include_guard_name } }, $file;
    }

    my @duplicate_guards = grep { @{ $guard{$_} } > 1 } keys %guard;

    for my $dup (@duplicate_guards) {

        my $caption = $cli_option{'noisy'} ? "\n        *** ERROR ***\n\n"
                      :                      "ERROR: ";

        warn $caption . "found duplicate include guard '$dup' in the following"
             . " headers:\n    " . join("\n    ", @{ $guard{$dup} }) . "\n";
    }

    die "\nPlease, fix the error(s) above\n"
        if @duplicate_guards > 0;
}

sub usage
{
    pod2usage(-verbose => 0);
}

sub help
{
    pod2usage(-verbose => 1);
}

sub man
{
    pod2usage(-verbose => 2);
}

sub process_cli_options
{
    help() if !GetOptions(
        'n|noisy'   =>  \$cli_option{'noisy'},
        'h|help'    =>  \&help,
        'usage'     =>  \&usage,
        'man'       =>  \&man
    );

    $root_dir_name = shift @ARGV // '.';  # defaults to PWD

    die "Error: no such directory '$root_dir_name' or don't have permissions to"
            . " access it\n"
        if ! -d $root_dir_name;

    return;
}

sub main
{
    process_cli_options();

    check_include_guards();

    return;
}

main();


__END__

=head1 NAME

check-sources - checks correctness of include guards in C header files

=head1 SYNOPSIS

check-sources [-n|--noisy] [-h|--help] [--usage] [--man] [path]

=head1 ARGUMENTS

=over 8

=item B<path>

A directory path where to search for C header files. If no path is given, the
current directory is used.

=back

=head1 OPTIONS

=over 8

=item B<-n|--noisy>

Format warnings in more "noisy" way so they draw more attention.

=item B<-h|--help>

Print this help summary.

=item B<--usage>

Print usage line of this summary.

=item B<--man>

Print the complete manpage.

=back

=head1 DESCRIPTION

This script recursively checks each C header file in the specified directory to
ensure correctness of include guards and reports duplicated guards if any.

=cut

