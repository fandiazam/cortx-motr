#!/usr/bin/env bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


# This script parses index.html file generated by lcov and
# generates simple tabular data, which can be imported in
# some spreadsheet

usage()
{
    echo "Script for processing coverage data"
    echo "usage: $(basename $0) -i index.html [-b] [-c] [-f] [-l]"
    echo "	Where,"
    echo "		-i <path> Path to index.html"
    echo "		-b Show branch coverage data"
    echo "		-c Show coverage data in csv format"
    echo "		-f Show function coverage data"
    echo "		-l Show line coverage data"
    echo "	If none of the -b,-f,-l options are specified then by default -l"
    echo "option is assumed."
}

BRANCH_COV=0
FUNCTION_COV=0
LINE_COV=0
CSV_FORMAT=0
INDEX_FILE=""

OUTPUT_BANNER="Module ln_cov ln_hit ln_tot fn_cov fn_hit fn_tot br_cov br_hit \
br_tot"

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

while getopts "bcfi:l" OPTION; do
    case "$OPTION" in
	b)
	    BRANCH_COV=1
	    ;;
	c)
	    CSV_FORMAT=1
	    ;;
	f)
	    FUNCTION_COV=1
	    ;;
	i)
	    INDEX_FILE="$OPTARG"
	    ;;
	l)
	    LINE_COV=1
	    ;;
	*)
	    usage
	    exit 1
	    ;;
    esac
done

if [ "x$INDEX_FILE" = "x" ]; then
    echo "index.html not specified"
    usage
    exit 1
fi

if [ $LINE_COV -eq 0 -a $FUNCTION_COV -eq 0 -a $BRANCH_COV -eq 0 ]; then
    LINE_COV=1
fi

# read file | find interesting lines | remove all HTML tags | \
#     remove all "&nbsp;" | remove all leading spaces | remove all "/ " \
#     convert from one datum per line to tabular format | \
#     squeeze consecutive spaces | remove % after number | remove data for UT |\
#     remove data for include/ | remove data for st/ | sort according to \
#     line coverage in descending order | print the fields to screen


tempfile=`mktemp` > /dev/null

cat $INDEX_FILE | egrep "coverFile|coverPer|coverNum" | sed 's/<[/]*[^>]*>//g'| \
 sed 's/&nbsp;//g;' | sed 's/^[ \t]*//' | sed 's/\/ //g' | \
 awk '/[a-zA-Z]/  { printf "\n"} {printf "%s\t", $0}' | \
 tr -s " " | tr '%' ' ' | grep -v "/ut" | grep -v "/include" | grep -v "/st" | \
 sort -b -g -k2 -r | \
 awk '{printf "%-20s %6s %6s %6s %6s %6s %6s %6s %6s %6s\n",\
$1,$2,$3,$4,$5,$6,$7,$8,$9,$10}' |\
    grep -v "^[ \t]*$" > $tempfile

if [ $CSV_FORMAT -eq 1 ]; then
    FORMAT_STRING1="%s,"
    FORMAT_STRING2="%s,%s,%s,"
else
    FORMAT_STRING1="%-20s | "
    FORMAT_STRING2="%6s %6s %6s | "
fi

tempscript=`mktemp`

cat > $tempscript <<EOF
BEGIN {
	lc = $LINE_COV;
	bc = $BRANCH_COV;
	fc = $FUNCTION_COV;
}
{
	printf "$FORMAT_STRING1", \$1;
}
lc == 1 {
	printf "$FORMAT_STRING2", \$2, \$3, \$4;
}
bc == 1 {
	printf "$FORMAT_STRING2", \$5, \$6, \$7;
}
fc == 1 {
	printf "$FORMAT_STRING2", \$8, \$9, \$10;
}
{
	printf "\n"
}
EOF

echo $OUTPUT_BANNER | awk -f $tempscript

echo

cat $tempfile | awk -f $tempscript

rm $tempfile
rm $tempscript
