#! /usr/bin/env stap

/*
 * Copyright (c) 2013-2020 Seagate Technology LLC and/or its Affiliates
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For any questions about this software or licensing,
 * please email opensource@seagate.com or cortx-questions@seagate.com.
 *
 */


/*
 * This systemtap script should be invoked through ./scripts/slugabed.sh.
 *
 * See http://sourceware.org/systemtap for information on systemtap.
 *
 * This script measures time that a specified user process spends in system
 * calls. To this end, time is measured by gettimeofday_us() at the entry and
 * return from a system call. This time is accumulated in an aggregate
 * (associative array) indexed by the user stack trace at the moment of entry to
 * the system call.
 */

/*
 * Synopsis:
 *
 *     slugabed.stp PATH_TO_BINARY FAULTS? PROFILE?
 *
 * Where each "?" parameter is either 1 or 0.
 */

/**
 * in_time[] is used to record syscall entry time. This array is indexed by
 * thread identifiers.
 */
global in_time[40960];

/**
 * This associative array, indexed by raw stack backtrace strings, contains
 * decoded backtraces, where addresses are resolved to symbols (function names).
 */
global trace[40960];

/**
 * This aggregate, indexed by raw backtrace strings counts time spent in
 * syscalls.
 */
global time[40960];

/**
 * This is used to sort output by total time, see below.
 */
global timesum[40960];

%( @3 == "1" %?
/**
 * This associative array, indexed by symbolic kernel+user backtrace, counts
 * number of times particular stack was observed from a periodic timer
 * interrupt. Index "none" means that the target process wasn't running when the
 * interrupt happened.
 */
global profile[40960];
%)

/**
 * the pid of the target process.
 */
global process_pid;

probe begin {
	process_pid = 0;
	print("Collecting data... Type <intr> to exit and display results.\n")
}

/**
 * This probe is invoked whenever the process identified by @1 (which might be a
 * binary's name or a pid) makes a system call.
 */
probe process(@1).syscall {
	/* record the syscall entry time. */
	in_time[tid()] = gettimeofday_us();
	process_pid = pid();
}


%( @2 == "1" %?
/**
 * This probe is invoked whenever any process takes a pagefault.
 */
probe vm.pagefault {
	if (process_pid != 0 && process_pid == pid())
		/* record the syscall entry time. */
		in_time[tid()] = gettimeofday_us();
}
%)

/**
 * This probe is invoked when the process is about to return from a system call
 * or when any process is about to return from a page fault.
 */
probe process(@1).syscall.return
%( @2 == "1" %?
	,vm.pagefault.return
%)
{
	if (process_pid != 0 && process_pid == pid()) {
		intime = in_time[tid()];
		/*
		 * intime can be 0 when a new thread is created: it returns from
		 * a system call (clone(2)) which it never entered.
		 */
		if (intime != 0) {
			delta = gettimeofday_us() - intime;
			/*
			 * Ignore small delays to reduce the probe overhead.
			 */
			if (delta > 10) {
				/*
				 * ubacktrace() is relatively expensive. To
				 * avoid systemtap aborting the script due to
				 * excessive overhead, 'slugabed' script increases
				 * systap limits.
				 *
				 * Newer versions of systemtap have preferable
				 * ucallers() function.
				 */
				stk = ubacktrace();
				us = pp() . stk;
				time[us] <<< delta;
				/*
				 * timesum[] duplicates time[]. Its only purpose
				 * is to make sorted output by the "end" probe
				 * possible.
				 *
				 * Newer versions of systemtap allow sorting by
				 * aggregates.
				 */
				timesum[us] += delta;
				if (trace[us] == "")
					trace[us] = pp() . "\n" .
						sprint_ustack(stk);
			}
		}
		delete in_time[tid()];
	}
}

/**
 * This probe is invoked when a thread in the process exits. In this case, the
 * thread enters a system call, but never returns from it.
 */
probe process(@1).thread.end {
	delete in_time[tid()];
}

%( @3 == "1" %?
probe timer.profile {
	if (process_pid != 0 && process_pid == pid())
		profile["\n" . sprint_backtrace() .
			"\n" . sprint_ubacktrace()]++;
	else
		profile["\nnone"]++;
}
%)

/**
 * This is called when the script finished.
 *
 * Print the accumulated data, longest waits first.
 */
probe end {
	w_entries = 0;
	p_entries = 0;
	foreach (us in timesum- limit 1000) {
		printf("\nsum: %d min: %d max: %d avg: %d num: %d\n%s\n",
		       @sum(time[us]), @min(time[us]), @max(time[us]),
		       @avg(time[us]), @count(time[us]), trace[us]);
		w_entries++;
	}
%( @3 == "1" %?
	foreach (stk in profile- limit 1000) {
		printf("\nhits: %d%s\n", profile[stk], stk);
		p_entries++;
	}
%)
	printf("total entries: %d %d.\n", w_entries, p_entries);
}
