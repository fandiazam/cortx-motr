// If you want to run it on cluster just use
// # stap -vv m0t1fs_inode_operations.stp

probe begin
{
	println("begin");
}

probe end
{
	println("end");
}

// m0t1fs_reg_inode_operations

probe module("m0tr").function("m0t1fs_setattr")
{
	ATTR_SIZE = (1 << 3)
	name = d_name($dentry)
	size = $attr->ia_size
	do_truncate = ($attr->ia_valid & ATTR_SIZE) != 0;
	printf("pid=%d tid=%d execname=%s func=%s name=%s size=%d do_truncate=%d\n",
	       pid(), tid(), execname(), ppfunc(), name, size, do_truncate);
}

probe module("m0tr").function("m0t1fs_getattr").return
{
	name = d_name($dentry)
	rc = $return
	size = $stat->size
	blksize = $stat->blksize
	blocks = $stat->blocks
	printf("pid=%d tid=%d execname=%s func=%s name=%s rc=%d size=%d blksize=%d blocks=%d\n",
	       pid(), tid(), execname(), ppfunc(), name,
	       rc, size, blksize, blocks);
}

probe module("m0tr").function("m0t1fs_setxattr")
{
	name = d_name($dentry)
	attr_name = kernel_string($name)
	attr_value = kernel_string_n($value, $size)
	printf("pid=%d tid=%d execname=%s func=%s name=%s attr_name=%s attr_value=%s\n",
	       pid(), tid(), execname(), ppfunc(), name,
	       attr_name, attr_value);
}

probe module("m0tr").function("m0t1fs_getxattr").return
{
	name = d_name($dentry)
	attr_name = kernel_string($name)
	attr_value = kernel_string_n($buffer, $size)
	rc = $return
	printf("pid=%d tid=%d execname=%s func=%s name=%s attr_name=%s attr_value=%s rc=%d\n",
	       pid(), tid(), execname(), ppfunc(), name,
	       attr_name, attr_value, rc);
}

// m0t1fs_dir_inode_operations

probe module("m0tr").function("m0t1fs_create"),
      module("m0tr").function("m0t1fs_lookup"),
      module("m0tr").function("m0t1fs_unlink")
{
	name = d_name($dentry)
	printf("pid=%d tid=%d execname=%s func=%s name=%s\n",
	       pid(), tid(), execname(), ppfunc(), name);
}

// m0t1fs_aops

probe module("m0tr").function("m0t1fs_direct_IO")
{
	printf("pid=%d tid=%d execname=%s func=%s\n",
	       pid(), tid(), execname(), ppfunc());
}

// address_space_operations

probe module("m0tr").function("file_aio_read"),
      module("m0tr").function("file_aio_write")
{
	name = d_name($kcb->ki_filp->f_path->dentry)
	seg_nr = $seg_nr
	pos = $pos
	printf("pid=%d tid=%d execname=%s func=%s name=%s seg_nr=%d pos=0x%x pos=%d\n",
	       pid(), tid(), execname(), ppfunc(), name, seg_nr, pos, pos);
	for (seg = 0; seg < seg_nr; ++seg) {
		printf("    [%d] iov_base=0x%x iov_len=0x%x iov_len=%d\n",
		       seg, $iov[seg]->iov_base,
		       $iov[seg]->iov_len, $iov[seg]->iov_len);
	}
}

probe module("m0tr").function("m0t1fs_ioctl")
{
	printf("pid=%d tid=%d execname=%s func=%s\n",
	       pid(), tid(), execname(), ppfunc());
}

probe module("m0tr").function("m0t1fs_fsync")
{
	name = d_name($file->f_path->dentry)
	start = $start
	end = $end
	datasync = $datasync
	printf("pid=%d tid=%d execname=%s func=%s name=%s start=%d end=%d datasync=%d\n",
	       pid(), tid(), execname(), ppfunc(), name, start, end, datasync);
}

probe module("m0tr").function("m0t1fs_flush")
{
	name = d_name($file->f_path->dentry)
	printf("pid=%d tid=%d execname=%s func=%s name=%s\n",
	       pid(), tid(), execname(), ppfunc(), name);
}
