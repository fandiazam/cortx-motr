#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

set -eo pipefail

source "$0.conf"

backstore=$1

which targetcli &>/dev/null || {
    echo >&2 "$0: 'targetcli' is not found, cannot proceed"
    exit 2
}

[[ $backstore == fileio || $backstore == block ]] || {
    echo >&2 "$0: missing or unsupported argument: '$backstore'"
    echo >&2
    echo >&2 "Usage: $0 fileio|block"
    exit 2
}

echo '--> Clearing existing iSCSI configuration'
targetctl clear

echo '--> Enabling LUNs auto mapping'
targetcli set global auto_add_mapped_luns=true

iqn=$iqn_prefix$HOSTNAME:$backstore
echo "--> Configuring iSCSI target $iqn"
targetcli iscsi/ create $iqn
targetcli iscsi/$iqn/tpg1 set attribute generate_node_acls=1
targetcli iscsi/$iqn/tpg1 set attribute demo_mode_write_protect=0

if [[ $backstore == fileio ]] ; then
    echo "--> Configuring $img_num iSCSI file images"
    for (( i=0 ; i < img_num ; ++i )) ; do
        img_name=$(printf '%s-%s%02d' $HOSTNAME $backstore $i)
        targetcli backstores/$backstore create $img_name /var/target/images/$img_name.img $img_size
        targetcli iscsi/$iqn/tpg1/luns create /backstores/$backstore/$img_name
    done
elif [[ $backstore == block ]] ; then
    devices=( $(ls /dev/[sv]d[b-z]) )
    (( ${#devices[@]} > 0 )) || {
        echo >&2 "$0: no block devices found for export"
        exit 1
    }
    echo "--> Configuring iSCSI block devices: ${devices[*]}"
    for (( i=0 ; i < ${#devices[@]} ; ++i )) ; do
        img_name="$HOSTNAME-${devices[$i]##*/}"
        targetcli /backstores/$backstore create $img_name ${devices[$i]}
        targetcli iscsi/$iqn/tpg1/luns create /backstores/$backstore/$img_name
    done
else
    echo >&2 "$0: unsupported backstore type: '$backstore'"
    exit 2
fi

echo '--> Saving iSCSI configuration'
targetcli saveconfig
targetcli ls > /var/log/${0##*/}.log
