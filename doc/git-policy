                        Motr project Git policy

Some parts of this document are based on the content of a similar guides,
found in the Linux kernel's documentations:

    Documentation/development-process/5.Posting
    Documentation/development-process/7.AdvancedTopics
    Documentation/SubmittingPatches


BASIC PRINCIPLES
----------------

 * dev is always stable: it can be built without errors and pass all
   unit tests.

 * All active development is done in so called "topic" (or "feature")
   branches (see TASK LIFECYCLE).

 * Try to keep history simple and straight as much as possible, as long as
   it remains reasonable and doesn't add pain into the process.

 * Don't overuse merges, try to avoid them whenever it's possible, use
   'rebase' instead (see MERGE POLICY).

 * Don't change history which is already public (i.e. in the central
   repository) with 'rebase' or 'commit --amend'.

 * Create descriptive and meaningful commit messages (see FORMAT OF COMMIT
   MESSAGE).

 * Don't publish your tangled and awkward commit history, which reflects
   the hard times you got while working on a task. Instead, use interactive
   'rebase' to reorganize and polish your commits before pushing them into
   central repository.

 * Organize commits into a logically independent and consistent pieces
   (see ORGANIZING YOUR COMMITS)


TASK LIFECYCLE
-------------

 * For each new task a branch with a corresponding name should be created
   on top of dev.

 * All task-related development goes in this topic branch.

 * When a task is completed, the topic branch is merged back into the
   dev and a "landing" tag is created for this merge-point (see LANDING
   TAGS).

 * After this, a topic branch is deleted.


LANDING TAGS
------------

Whenever a topic branch gets merged into dev, a "landing" tag should be
created for this merge-point.

The tag has format

    landing.BRANCH                  e.g.:  landing.cunit

where BRANCH is a name of the topic branch being merged into dev.

For example, merging branch "net_buffer_pool" into dev:

    $ git checkout dev
    $ git merge net_buffer_pool
    $ git tag landing.net_buffer_pool
    $ git push origin dev landing.net_buffer_pool

Don't forget to explicitly push the new "landing" tag, because tags don't
get pushed automatically.

NOTICE: landing tags are created as "lightweight" tags (without -a -s -u or -m
`git tag` options). This is required in order to make `git describe` to report
based on sprint tags and not on landing tags.

Tagging of each merge into dev allows to track the history of dev
branch easily and helps to see more clearly it's evolution.

For example, to check what was committed directly into dev, starting
from a merge of "cunit" branch, one could use the following command:

    $ git log --first-parent --oneline --decorate landing.cunit..dev


SPRINT TAGS
-----------

Additionally to the "landing" tags, a "sprint" tag is created in dev
branch at the beginning of each sprint.

The tag has format

    t<P>.<L>-s<S>                   e.g.:  t1.3-s16

where P, L and S are decimal numbers with the following meaning:

    P - a current phase of motr development (at the moment of writing
        this document it's still 1 ;)

    L - a sub-phase, usually it's a serial number of a "motr launch" or
        "re-launch" in the current phase

    S - a sprint number, counting from the beginning of the phase

Sprint and landing tags intended to be a kind of release points. They allow
to see which tasks were finished within a sprint.

NOTICE: sprint tags are created as unsigned annotated tags, for example

    $ git tag -m 'T1.4 Sprint 19' t1.4-s19

This allows `git describe` to report based on sprint tags and not on landing
tags:

    $ git describe dev@{july}
    t1.4-s19-281-gf887320


MERGE POLICY
------------

In brief:

 * Always use 'pull --rebase' instead of a simple 'pull'. This prevents
   unnecessary merges, when you are working on dev branch or share a
   topic branch with other developers.

   It's easy to create an alias for this command in ~/.gitconfig:

       [alias]
           pullrb = pull --rebase   # you can name it whatever you want

 * Always rebase your local changes on top of upstream branch. For
   example, you've created a new topic branch B on top of dev and make
   several commits locally, at the same time dev has been also updated
   in central repo - in this case don't merge dev into B, instead rebase
   B on top of new dev. Or another example, when you work on some branch
   B together with other developer(s) - never merge origin/B into your
   local branch B, instead rebase B on top of origin/B (either with 'fetch'
   and 'rebase' or with 'pull --rebase').

 * Don't publish your tangled and awkward commit history, which reflects
   the hard times you got while working on a task. Instead, use interactive
   rebase to reorganize and polish your commits before pushing them into
   central repository.

 * Don't merge in every new commit from dev into your branch, do it
   only when it's really needed, for example when there are some changes
   which touch your files or when some API, which is used by your code, was
   added or changed.

 * When you are ready to merge your changes back to dev use the following
   rules:

     (a) sync your local dev branch with remote dev

           $ git checkout dev
           $ git pull --rebase

     (b) if you don't have any merges[*] in the history of your topic
         branch, then rebase your topic branch on top of dev,
         otherwise skip to step (c)

           $ git rebase dev YOUR_BRANCH

         [*] When looking for merge commits, you can use this command:

               $ git log --merges --oneline dev..YOUR_BRANCH

     (c) merge your branch back to dev

           $ git checkout dev

         and then

           $ git merge --no-ff YOUR_BRANCH
         or
           $ git merge YOUR_BRANCH

         Depending on how many commits there are in your branch and how they
         relate to each other (one logical series or a number of independent
         changes) you may decide either to use '--no-ff' option for 'merge' or
         not. If used, it will group your changes into a separate line of
         history instead of doing fast-forward. Please, follow a common sense
         here, there is definitely no point to use '--no-ff' option if your
         branch has only one commit ;)


Rationale:

The normal git workflow involves the use of a lot of branches. Each line
of development can be separated into a separate "topic branch" and
maintained independently. Branches in git are cheap, there is no reason to
not make free use of them. Merge in commits into dev from development
branches when they are in complete form and ready to go - not before.

Git provides some powerful tools which can allow you to rewrite your
development history. An inconvenient commit (one which breaks bisection,
say, or which has some other sort of obvious bug) can be fixed in place or
made to disappear from the history entirely. A commit series can be
rewritten as if it had been written on top of today's mainline, even though
you have been working on it for months. Changes can be transparently
shifted from one branch to another. And so on. Judicious use of git's
ability to revise history can help in the creation of clean commits sets
with fewer problems.

Excessive use of this capability can lead to other problems, though, beyond
a simple obsession for the creation of the perfect project history.
Rewriting history will rewrite the changes contained in that history,
turning a tested (hopefully) program tree into an untested one.  But,
beyond that, developers cannot easily collaborate if they do not have a
shared view of the project history; if you rewrite history which other
developers have pulled into their repositories, you will make life much
more difficult for those developers, forcing them to go through a painful
process of re-merging things, which they already merged before. So a
simple rule of thumb applies here: history which has been exported to
others should generally be seen as immutable thereafter.

So, once you push a set of changes to your publicly-available server, those
changes should not be rewritten. Git will attempt to enforce this rule if
you try to push changes which do not result in a fast-forward merge (i.e.
changes which do not share the same history). It is possible to override
this check, and there may be times when it is necessary to rewrite an
exported tree. But such actions should be rare. This is one of the reasons
why development should be done in private branches (which can be rewritten
if necessary) and only moved into public branches when it's in a reasonably
advanced state.

As the mainline (or other tree upon which a set of changes is based)
advances, it is tempting to merge with that tree to stay on the leading
edge. For a private branch, rebasing can be an easy way to keep up with
another tree, but rebasing is not an option once a tree is exported to the
world. Once that happens, a full merge must be done. Merging occasionally
makes good sense, but overly frequent merges can clutter the history
needlessly. Suggested technique in this case is to merge infrequently, and
generally only at specific release points. If you are nervous about
specific changes, you can always perform test merges in a private branch.
The git 'rerere' tool can be useful in such situations; it remembers how
merge conflicts were resolved so that you don't have to do the same work
twice.

Also, please refer to the explanation of rebase and merge rules, by Linus
Torvalds, see section RECOMMENDED RESOURCES ON GIT, item [4].


FORMAT OF COMMIT MESSAGE
------------------------

Each commit needs to have a good log message which quickly and clearly
communicates its purpose to the rest of the world. To that end, each
commit message will be composed of the following:

 - A summary line - one-line description of what the commit does. This
   message should be enough for a reader who sees it with no other context
   to figure out the scope of the commit; it is the line that will show up
   in the "short form" changelogs. It will also be the only thing that
   people may quickly see when, two or three months later, they are going
   through perhaps thousands of commits using tools such as 'gitk' or 'git
   log --oneline'. For these reasons, the "summary" must be no more than
   70-75 characters. It's usually formatted with the relevant subsystem name
   first, followed by the purpose of the commit. For example:

     rpc: embed transfer machine into m0_rpcmachine structure
     rpc/session: add m0_rpc_session_establish_sync() function
     stob/ut: add direct-io test

   But don't put 'LogD#XXX' into the summary. It just eats up precious
   space without holding any meaningful information. Instead, use a
   dedicated tag line for this purpose (see TAG LINES).

 - A blank line, followed by a detailed description of the contents of the
   commit. This description can be as long as is required; it should say
   what the commit does and why it was necessary.

 - A blank line, followed by one or more tag lines (see TAG LINES).

Be as specific as possible. The WORST descriptions possible include things
like "update module X", "bug fix for module X", or "some changes", "some
bugs fixed", "addressing inspection comments"... and so on.

If your summary description starts to get long, that's a sign that you
probably need to split up your patch (see ORGANIZING YOUR COMMITS).

For the few simple cases it's allowed to use short one-line commit
messages, specifically:

    * fix alignment
    * fix spaces
    * fix typos
    * reformat comments

But subsystem name is still appreciated.

To that end, the summary line should describe the effects of and motivation
for the change as well as possible, given the one-line constraint. The
detailed description can then amplify on those topics and provide any
needed additional information. If the commit fixes a bug, cite the commit
which introduced the bug if possible (and please provide both the commit ID
and the title when citing commits). If a problem is associated with
specific log or compiler output, include that output to help others,
searching for a solution to the same problem. If the change is meant to
support other changes coming in later patch, say so. If internal APIs are
changed, detail those changes and how other developers should respond. In
general, the more you can put yourself into the shoes of everybody who will
be reading your changelog, the better that changelog (and the Motr
project as a whole) will be.


TAG LINES
---------

A tag line is just a line of text of specified format at the bottom of
commit message, separated by a blank line from the main body. Usually, each
of these lines has the format:

    tag: Full Name <email address>  optional-other-stuff

But git itself doesn't impose any restrictions on this format or on type of
tags. These are defined by agreement. The idea is that information in tag
line can be extracted and processed by scripts and also it provides a
standard way to specify additional information about commit.

In Motr project we define the following tags:

    Reviewed-on: URL

        You *should* add this tag to commit before pushing it into
        central repository, if it was inspected or if it's going to be
        inspected. For example:

        Reviewed-on: http://reviewboard.clusterstor.com/r/558

    Reviewed-by: Full Name <email address>

        This tag can be used for patches, which were reviewed (or
        discussed) in some other ways than on ReviewBoard, for example by
        email, skype or face to face, etc. Example:

        Reviewed-by: Nikita Danilov <nikita.danilov@seagate.com>

    Acked-by: Full Name <email address>

        This tag can be used to indicate that the person, mentioned in the
        tag, agrees with the change or has approved it in a certain way.
        Example:

        Acked-by: Carl Braganza

    Tested-by: Full Name <email address>

        It indicates that patch was successfully tested by someone else
        besides the author. For example when you ask somebody to try your
        patch on his side. Example:

        Tested-by: Dmitriy Chumak <dmitriy.chumak@seagate.com>

    References: LogD-<X.Y> # <N>

        If patch fixes some bug or defect, you *should* add this tag. X and
        Y is the current phase and sub-phase numbers (the same as for
        SPRINT TAGS).  And N is a defect ID (number). Its allowed to
        specify several defect IDs, separated by comas. Example:

        References: LogD-1.3 # 362
        References: LogD-1.3 # 238, 239, 241

    Reported-by: Full Name <email address>

        Names a person who reported a problem which is fixed by this patch.
        Usually this tag is used in conjunction with "References" tag.
        Example:

        Reported-by: Rajesh Bhalerao

    Bloated-by:

      <size>
        `./scripts/build/bloatmeter`
      </size>

        Provides an information about how the image size of main binary files,
        like libmotr.so or m0tr.ko, is affected by the current patch.
        The idea, is to be able to track down how much each particular feature
        contributes to the whole image size and to find the "culprit" if image
        size goes out of control.
        As a general guideline, this tag should be added to merge commits during
        landing a feature branch on dev. It should tell the difference in
        image sizes between the original dev (on which feature branch is
        based) and current dev (with landed feature branch). In case if
        feature is landed as a single patch (w/o a merge), then this tag should
        be added to that commit.

        Example:

          <size>
              text     data      bss    total filename
              -312        0        0     -312 libmotr-altogether.so
              -288        0        0     -288 m0tr.ko
              -288        0        0     -288 libmotr.so
          </size>


ORGANIZING YOUR COMMITS
-----------------------

Commit locally as much as you want and in any way you want, BUT when in
comes to making your changes public (i.e. pushing into central
repository) - organize them into series of logically independent and
consistent commits.

Splitting up commits is a bit of an art; some developers spend a long time
figuring out how to do it in a right way. There are a few rules of thumb,
however, which can help considerably:

 - The commit series you post will almost certainly not be the series of
   changes found in your working tree. Instead, the changes you have made
   need to be considered in their final form, then split apart in ways
   which make sense. The developers are interested in discrete,
   self-contained changes, not the path you took to get to those changes.

 - Each logically independent change should be formatted as a separate
   commit. These changes can be small ("add a field to this structure") or
   large (adding a significant new API, for example), but they should be
   conceptually small and amenable to a one-line description. Each commit
   should make a specific change which can be reviewed on its own and
   verified to do what it says it does.

 - As a way of restating the guideline above: do not mix different types of
   changes in the same commit. If a single commit fixes a critical security
   bug, rearranges a few structures, and reformats the code, there is a
   good chance that it will confuse and take time away from people which
   will analyze it, while trying to fix some bug or to understand what's
   going on.

 - Ideally, each commit should yield a program which builds and runs
   properly; if your commit series is interrupted in the middle, the result
   should still be a working program. Partial application of a commit
   series is a common scenario when the "git bisect" tool is used to find
   regressions; if the result is a broken program, you will make life
   harder for developers who are engaging in the noble work of tracking
   down problems.

 - Do not overdo it, though. One developer once posted a set of edits
   to a single file as 500 separate patches - an act which did not make him
   the most popular person on the kernel mailing list. A single patch can
   be reasonably large as long as it still contains a single *logical*
   change.

 - It can be tempting to add a whole new infrastructure with a series of
   commits, but to leave that infrastructure unused until the final commit
   in the series enables the whole thing. This temptation should be
   avoided if possible; if that series adds regressions, bisection will
   finger the last commit as the one which caused the problem, even though
   the real bug is elsewhere. Whenever possible, a commit which adds new
   code should make that code active immediately.

For example, if your changes include both bug fixes and performance
enhancements for a single subsystem, separate those changes into two or
more commits. If your changes include an API update, and a new unit test
which uses that new API, separate those into two commits.

On the other hand, if you make a single change to numotrus files, group
those changes into a single commit. Thus a single logical change is
contained within a single commit.

If you do any rearrangement of code, which doesn't change the logic and
behavior of the program, i.e. fixing spaces, formatting code blocks,
cutting and pasting function's implementation from one place to another or
renaming all occurrences of some structure/function - always put such
change into a separate commit.

The same applies to the bug fixes - when you fix some issue, always do it
in a separate commit and provide a detailed description of the bug and
explain the fix in a commit message. Even if the fix is just one line of
code. Don't fix two bugs in the same commit. Though, all of these relates
only to the "real" bugs, i.e. incorrect program behavior, race condition,
crash, etc. Defects, found during code inspection, if they are not a real
bugs, should be treated as a normal evolution of the code.

Also, ensure that all commits within a given branch stick closely to the
associated topic; a "module A fixes" branch should not be making changes to
the code of "module B".


RECOMMENDED RESOURCES ON GIT
----------------------------

 [1] http://progit.org         -- A really good and professional guide with
                                  lots of examples and clean nice diagrams,
                                  highly recommended

 [2] http://book.git-scm.com   -- The Git Community Book

 [3] http://gitcasts.com       -- A series of screencasts to help learn Git

 [4] http://lwn.net/Articles/328438/  -- Very good explanation by Linus Torvalds
                                         of rebase and merge rules, this is a
                                         "must read"
