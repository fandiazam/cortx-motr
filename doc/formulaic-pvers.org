* formulaic-pvers
** _CHECKLIST
*** [code]
**** DONE [[#conf_pver_virtual_create][conf_pver_virtual_create]]
**** DONE [[#m0_conf_pver_find_by_fid][m0_conf_pver_find_by_fid]]
**** NEXT update conf validation rules
**** DONE conf_pver_virtual_create(): implement error handling
**** TODO fix pver_lookup()
->coo_lookup() must not be called for formulaic pvers.
**** TODO conf_pver_base_w(): implement error handling
**** TODO fix callers of m0_conf_pver_get()
They should m0_confc_close() the returned pver.
*** [debug]
**** DONE debug ha-state-ut
**** CANCELLED review conf_objv_copy()                         :CANCELLED:
- State "CANCELLED"  from ""           [2016-07-06 Wed 15:06] \\
  It is easier to rewrite conf_pver_virtual_create().
*** [test]
**** test conf_pver_virtual_create() failures
Use finject.
*** [refactor]
**** ? add `type' parameter to m0_conf_walk()
If type != NULL, fn() will be called only for objects of this type.
**** s/m0_conf_pver/m0_conf_pver_subtree/ in conf consumers' code
Rationale:
#+BEGIN_SRC c
old(const struct m0_conf_pver *pver)
{
        use(&pver->pv_u.subtree.pvs_attr);
}

new(const struct m0_conf_pver_subtree *pver)
{
        use(&pver->pvs_attr);
}
#+END_SRC
**** get rid of m0_confx_{rack,enclosure,controller,disk}::*_pvers
:PROPERTIES:
:CUSTOM_ID: pvers-arrays
:END:
Motr should deduce the information needed to fill
m0_conf_{rack,enclosure,controller_disk}::*_pvers by itself.
Implementation might be a simple application of [[#m0_conf_walk][m0_conf_walk()]].
See also [[https://seagate.slack.com/archives/formulaic-pvers/p1466700541000560][Slack discussion]].
**** conf/helpers.[hc] cleanup
Rationale: conf/helpers.[hc] is not a bin for unidentified
conf-related material.  If some module can help itself locally with a
static function, it should do so.
.
E.g. m0_conf_service_is_top_rms() is only used once. It should
relocate to motr/ha.c as a static function.
***** DONE use a macro for m0_conf_*_get() functions
*** _attic                                                        :ARCHIVE:
**** DONE [MOTR-1775] update conf/{obj,onwire}.h
**** DONE conf/objs/pver.c
**** DONE make the code compile
**** DONE spiel
**** DONE m0confgen
**** DONE [[#m0_conf_walk][m0_conf_walk]]
**** DONE [[#conf_pver_formulate][conf_pver_formulate]]
**** DONE [[#conf_pver_enumerate][conf_pver_enumerate]]
**** DONE [[#conf_pver_failures_cid][conf_pver_failures_cid]]
**** DONE [[#conf_pver_virtual_fid][conf_pver_virtual_fid]]
**** DONE [optimization] update recd vectors of actual pvers on HA notification
** use cases
*** 0. HA state update notification arrives
**** inputs
- m0_ha_note (included in m0_ha_nvec)
- m0_conf_cache
**** outputs
- m0_conf_obj::co_ha_state is updated
- m0_conf_obj::co_ha_chan is signalled
- .recd vector of the corresponding actual pvers is updated
- some conf app (pool/flset.c?) updates "current pver" reference
**** algorithm
***** update .recd vectors of the corresponding _actual_ pvers
***** call [[#m0_conf_pver_find][m0_conf_pver_find()]]
It will create new virtual pver subtree, if necessary.
***** update "current pver" reference
:PROPERTIES:
:CUSTOM_ID: current-pver
:END:
****** [m0t1fs] m0t1fs_sb::csb_pool_version
****** [m0d] ? XXX
*** 1. IO operation needs a pver
E.g. to create a file.
**** use [[#current-pver]["current pver"]]
*** 2. restore pver from MD attribute
**** inputs
- pver fid # actual or virtual
- m0_conf_root
**** outputs
- Either m0_conf_pver Error
**** algorithm
***** [[#m0_conf_pver_find_by_fid][m0_conf_pver_find_by_fid]]
** API
*** main
**** DONE m0_conf_pver_find :: m0_conf_pool -> Either m0_conf_pver Error
:PROPERTIES:
:CUSTOM_ID: m0_conf_pver_find
:END:
***** for each pver of the pool:
(we are talking about [[https://seagate.slack.com/files/vvv/F0LK9NU5V/conf-schema_codes.png][conf objects]] here)
****** if ![[#m0_conf_pver_is_clean][m0_conf_pver_is_clean]](pver):
******* continue # pver is not applicable; try the next one
****** if pver.kind is actual:
******* return pver # got it!
****** return [[#conf_pver_formulate][conf_pver_formulate]](pver)
***** error 'No suitable pver is found'
**** DONE m0_conf_pver_find_by_fid :: m0_fid -> m0_conf_root -> Either m0_conf_pver Error
:PROPERTIES:
:CUSTOM_ID: m0_conf_pver_find_by_fid
:END:
***** pver = m0_conf_cache_lookup(root.cache, fid)
***** if pver != NULL:
****** assert pver.kind is not formulaic
****** return pver
***** kind, container, key = [[#virtual-pver-fid-format][m0_conf_fid_read]](fid)
***** if kind is actual:
****** error 'Actual pver is missing'
***** assert kind is virtual
***** fpver = [[#conf_pver_formulaic_find][conf_pver_formulaic_find]](container, root)
***** if fpver == NULL:
****** error 'Formulaic pver is missing'
***** failed = m0_combination_inverse(key, conf_pver_objvs_count(fpver.base), sum(fpver.allowance))
***** return [[#conf_pver_virtual_create][conf_pver_virtual_create]](fid, base, fpver.allowance, failed)
**** DONE m0_conf_pver_is_clean :: m0_conf_pver -> Bool
:PROPERTIES:
:CUSTOM_ID: m0_conf_pver_is_clean
:END:
***** case pver.kind of:
****** actual
******* return pver.recd == [0 0 0 0]
****** formulaic
Can it generate a pver with online elements only?
******* return pver.base.recd == pver.allowance
**** DONE conf_pver_formulate :: m0_conf_pver -> Either m0_conf_pver Error
:PROPERTIES:
:CUSTOM_ID: conf_pver_formulate
:END:
conf_pver_formulate(fpver)
***** assert fpver.kind is formulaic
***** base = m0_conf_cache_lookup(fpver.base)
***** if base == NULL:
****** error 'Base pver is missing'
***** failures_cid = [[#conf_pver_failures_cid][conf_pver_failures_cid]](base)
***** virt_fid = [[#conf_pver_virtual_fid][conf_pver_virtual_fid]](fpver.id, failures_cid)
***** virt = m0_conf_cache_lookup(virt_fid)
***** if virt != NULL:
****** return virt
***** return [[#conf_pver_virtual_create][conf_pver_virtual_create]](virt_fid, base, fpver.allowance)
**** DONE conf_pver_failures_cid :: m0_conf_pver -> [[#FCID][FCID]]
:PROPERTIES:
:CUSTOM_ID: conf_pver_failures_cid
:END:
#+BEGIN_SRC c
/**
 * Computes index of combination of failed devices in the ordered
 * sequence of pver's devices.
 */
static uint64_t conf_pver_failures_cid(const struct m0_conf_pver *pver);
#+END_SRC
***** assert pver.kind is actual
***** failure_set = []
***** for objv in [[#m0_conf_walk][m0_conf_walk]](pver):
****** if objv.real.ha_state != M0_NC_ONLINE:
******* failure_set.append(objv.ix)
******* ## Do not descend into objv's children.
***** assert failure_set != []
***** nr_objvs = [[#conf_pver_objvs_count][conf_pver_objvs_count]](pver)
***** return m0_combination_index(nr_objvs, len(failure_set), failure_set)
**** DONE conf_pver_virtual_create :: m0_fid -> m0_conf_pver -> [uint32_t] -> Maybe [uint32_t] -> Either m0_conf_pver Error
:PROPERTIES:
:CUSTOM_ID: conf_pver_virtual_create
:END:
conf_pver_virtual_create(virt_fid, base, allowance, failed)
***** assert base.kind is actual
***** pver = create new m0_conf_pver
****** pver.obj.fid = virt_fid
****** pver attributes = base [[#actual-pver-attributes][attributes]]
****** pver.attr.P -= allowance[LVL_DISKS]
****** m0_conf_cache_add(pver)
***** for objv in [[#m0_conf_walk][m0_conf_walk]](base):
****** if objv.real.ha_state == M0_NC_ONLINE:
******* cache = objv.obj.cache
******* new_objv = m0_conf_obj_create(cache, [[#conf_objv_virtual_fid][conf_objv_virtual_fid]](cache))
******* m0_conf_cache_add(new_objv)
****** else:
******* ## Do not descend into objv's children.
***** return pver
**** DONE conf_pver_virtual_fid :: FPverId -> [[#FCID][FCID]] -> m0_fid
:PROPERTIES:
:CUSTOM_ID: conf_pver_virtual_fid
:END:
#+BEGIN_SRC c
/**
 * Generates fid of a virtual m0_conf_pver.
 *
 * @param fpver_id  Value of m0_conf_pver_formulaic::pvf_id.
 * @param fcid      Index of combination of failed devices in the ordered
 *                  sequence of pver's devices.
 */
static struct m0_fid conf_pver_virtual_fid(uint32_t fpver_id, uint64_t fcid);
#+END_SRC
See [[#virtual-pver-fid-format][virtual pver fid format]].
*** auxiliary
**** DONE m0_conf_walk
:PROPERTIES:
:CUSTOM_ID: m0_conf_walk
:END:
Traverses conf DAG (depth-first) and calls fn() once for each conf
object in the tree.
Mimicked after ftw().
**** DONE conf_pver_enumerate
:PROPERTIES:
:CUSTOM_ID: conf_pver_enumerate
:END:
**** DONE conf_pver_objvs_count
:PROPERTIES:
:CUSTOM_ID: conf_pver_objvs_count
:END:
***** go to the rightmost disk's objv
***** return objv.ix + 1
**** DONE conf_objv_virtual_fid :: m0_conf_cache -> m0_fid
:PROPERTIES:
:CUSTOM_ID: conf_objv_virtual_fid
:END:
#+BEGIN_SRC c
/**
 * Generates new fid for a m0_conf_objv of virtual pver.
 *
 * @pre  m0_conf_cache_is_locked(cache)
 */
static struct m0_fid conf_objv_virtual_fid(struct m0_conf_cache *cache);
#+END_SRC
Increments m0_conf_cache::ca_fid_counter.
**** DONE conf_pver_formulaic_find :: FPverId -> m0_conf_root -> Maybe m0_conf_pver
:PROPERTIES:
:CUSTOM_ID: conf_pver_formulaic_find
:END:
#+BEGIN_SRC c
/** Finds formulaic pver by its m0_conf_pver_formulaic::pvf_id attribute. */
static int conf_pver_formulaic_find(uint32_t fpver_id,
				    const struct m0_conf_root *root,
				    const struct m0_conf_pver **out)
#+END_SRC
** fid formats
*** pver
**** actual
***** .f_container
- 1-byte type id (0x76)
- 2-bit kind (0)
- 54-bit anything
***** .f_key
- 8-byte anything
**** formulaic
***** .f_container
- 1-byte type id (0x76)
- 2-bit kind (1)
- 54-bit anything
***** .f_key
- 8-byte anything
**** virtual
:PROPERTIES:
:CUSTOM_ID: virtual-pver-fid-format
:END:
***** .f_container
- 1-byte type id (0x76)
- 2-bit kind (2)
- 22-bit unused (zeros)
- 4-byte formulaic pver id
***** .f_key
- 8-byte index of combination of failed devices in the ordered
  sequence of pver's devices.
*** objv
**** actual
***** .f_container
- 1-byte type id (0x6a)
- 1-bit "virtual?" flag (0)
- 55-bit anything
***** .f_key
- 8-byte anything
**** virtual
***** .f_container
- 1-byte type id (0x6a)
- 1-bit "virtual?" flag (1)
- 55-bit unused (zeros)
***** .f_key
- 8-byte value of m0_conf_cache::ca_fid_counter at the moment of objv
  creation; see [[#conf_objv_virtual_fid][conf_objv_virtual_fid]]()
** pver kinds
*** actual pver
**** attributes
:PROPERTIES:
:CUSTOM_ID: actual-pver-attributes
:END:
***** recd: memory-only, not in configuration database
***** rackvs
***** pdclust_attr
***** tolerance: fixed-size array
**** obsolete attributes
- pv_nfailed
- pv_nr_failures -- replaced with .tolerance[]
- pv_nr_failures_nr -- not needed, since .tolerance[] has fixed size
- ? pv_ver  -- What do we need this for?
*** formulaic pver
Linked to m0_conf_pool::pl_pvers dir.
**** attributes
- id: short (~10 bit), unique per cluster
  This identifier is put into virtual pver fid. It is used to find
  formulaic pver from virtual pver fid.
- base: fid of base pver
- allowance: the number of objects excluded from the corresponding
  level of base pver subtree.
  @pre .allowance != [0 0 0 0]
*** virtual pver
Registered in conf_cache, but not linked to m0_conf_pool::pl_pvers dir.
**** attributes
Similar to [[#actual-pver-attributes][those of actual pver]], but "recd" is not used.
** _ISSUES
*** DONE locking
*** DONE finding actual pvers that correspond to a failed object
Failed object here is m0_conf_{rack,enclosure,controller,disk}.
See also [[#pvers-arrays][pver arrays]].
*** "recd" name is not future-proof
** terminology
*** FCID
:PROPERTIES:
:CUSTOM_ID: FCID
:END:
Index of combination of failed devices in the ordered sequence of
pver's devices.
*** RECD vector
Vector of 4 numbers: # of failed racks/enclosure/controllers/disks.
