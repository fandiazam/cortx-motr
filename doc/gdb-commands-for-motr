GDB extension for Motr:
--------------------------

There are two ways to write "user defined GDB commands".
1. Create a named batch of GDB commands using 'define' command
2. Using Python
Each of these two ways has their own benefits and drawbacks
e.g. compactness vs flexibility

We are using both these mechanisms to write GDB commands to print Motr
specific objects.

scripts/gdb/gdb-extensions and scripts/gdb/gdb-extensions.py define "user
defined GDB commands" for Motr. gdb-extensions defines commands using GDB's
'define' command, whereas all Python based GDB commands go in gdb-extensions.py.
These two file are automatically loaded from the top-level .gdbinit file which
located in the root directory of motr git repository.

To see list of motr related commands do:
(gdb) apropos m0
m0-bufvec-print -- Prints segments in m0_bufvec
m0-fop-types-list-print --     Prints global list of registered fop types
m0-indexvec-print -- Prints segments in m0_indexvec
m0-list-print -- Prints m0_list/m0_tl elements
m0-rpc-conn-print-sessions --     Prints list of sessions within connection

Use "help <m0-command-name>" to know more about the command and its usage.
These commands have detailed help with examples.

container_of() and offsetof() macros are now also available in gdb:
(gdb) macro list
macro define container_of(ptr, type, member) ((type *)((char *)(ptr)-(char *)(&((type *)0)->member)))
macro define offsetof(typ, memb) ((unsigned long)((char *)&(((typ *)0)->memb)))


Sample output:

Same m0-list-print command works with both m0_list and m0_tl, with same syntax.

<!-- Prints address of all m0_list_link -->
(gdb) m0-list-print fop_types_list
0x6981a8
0x698108
0x698068
0x697f28
0x697fc8
0x697e88
0x697de8
0x7ffff7ff2aa8
0x691748
0x6916a8
0x691608
0x691568
0x6914c8
0x691428
0x7ffff7ff53c8
0x7ffff7ff5328
0x7ffff7ff5288
0x7ffff7ff51e8
0x7ffff7ff5148
0x7ffff7ff50a8
0x7ffff7ff5008
0x7ffff7ff4f68
0x7ffff7ff4ec8
Total: 23

<!-- Prints address of each m0_fop_type instance in the list -->
(gdb) m0-list-print &fop_types_list struct m0_fop_type ft_linkage
0x6981a0
0x698100
0x698060
0x697f20
0x697fc0
0x697e80
0x697de0
0x7ffff7ff2aa0
0x691740
0x6916a0
0x691600
0x691560
0x6914c0
0x691420
0x7ffff7ff53c0
0x7ffff7ff5320
0x7ffff7ff5280
0x7ffff7ff51e0
0x7ffff7ff5140
0x7ffff7ff50a0
0x7ffff7ff5000
0x7ffff7ff4f60
0x7ffff7ff4ec0
Total: 23

(gdb) define session_visit
<!-- It is possible to control how each object is displayed. Just define
     a command that takes one argument and print it the way you want.
     Pass name of this command as last argument to m0-list-print. And
     m0-list-print will call this command for each object in the list -->
>set $s = (struct m0_rpc_session *)$arg0
>printf "session %p id %lu state %d\\n", $s, $s->s_session_id, $s->s_state
>end
(gdb) m0-list-print session->s_conn->c_sessions struct m0_rpc_session s_link session_visit
session 0x604c60 id 191837184000000002 state 4
session 0x624e50 id 0 state 4
Total: 2
(gdb) m0-list-print session->s_conn->c_sessions struct m0_rpc_session s_link
0x604c60
0x624e50
Total: 2

<!-- If last argument is "in-detail" then it prints each object in the
     list. Entire object (not just address) -->
(gdb) m0-list-print session->s_conn->c_sessions struct m0_rpc_session s_link in-detail
$1 = {s_session_id = 210415616000000002, s_state = M0_RPC_SESSION_IDLE, s_conn = 0x6043f0, s_link = {ll_next = 0x624e18,
    ll_prev = 0x604430}, s_cob = 0x0, s_nr_active_items = 0, s_unbound_items = {l_head = 0x604518, l_tail = 0x604518},
  s_slot_table_capacity = 5, s_nr_slots = 5, s_slot_table = 0x624c90, s_rc = 0, s_mutex = {m_impl = {__data = {__lock = 0,
        __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}},
      __size = '\000' <repeats 39 times>, __align = 0}, m_owner = 0}, s_state_changed = {c_chan = {ch_guard = {m_impl = {
          __data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0,
              __next = 0x0}}, __size = '\000' <repeats 39 times>, __align = 0}, m_owner = 0}, ch_links = {
        t_magic = 4848196803591489876, t_head = {l_head = 0x6045a8, l_tail = 0x6045a8}}, ch_waiters = 0}}}
$2 = {s_session_id = 0, s_state = M0_RPC_SESSION_IDLE, s_conn = 0x6043f0, s_link = {ll_next = 0x604430, ll_prev = 0x6044f8},
  s_cob = 0x0, s_nr_active_items = 0, s_unbound_items = {l_head = 0x624e38, l_tail = 0x624e38}, s_slot_table_capacity = 1,
  s_nr_slots = 1, s_slot_table = 0x617f20, s_rc = 0, s_mutex = {m_impl = {__data = {__lock = 0, __count = 0, __owner = 0,
        __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\000' <repeats 39 times>,
      __align = 0}, m_owner = 0}, s_state_changed = {c_chan = {ch_guard = {m_impl = {__data = {__lock = 0, __count = 0,
            __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}},
          __size = '\000' <repeats 39 times>, __align = 0}, m_owner = 0}, ch_links = {t_magic = 4848196803591489876, t_head = {
          l_head = 0x624ec8, l_tail = 0x624ec8}}, ch_waiters = 0}}}

(gdb) m0-bufvec-print &bufs[8]
seg:index start_addr end_addr offset bcount sum
seg:0 0x902f5a0 0x902f5a8 0<0B> 8<8B> 0
seg:1 0x902f5c0 0x902f5c8 8<8B> 8<8B> 0
seg:2 0x902f5e0 0x902f5e8 16<16B> 8<8B> 0
seg:3 0x902f600 0x902f608 24<24B> 8<8B> 0
seg:4 0x902f620 0x902f628 32<32B> 8<8B> 0
seg:5 0x902f640 0x902f648 40<40B> 8<8B> 0
nr_seg: 6
buf_size: 48<48B>
sum: 0
<!-- "sum" is sum of bytes in the buffer. If it is 0, implies that
     buffer has all bytes zero -->

(gdb) m0-indexvec-print vec
   :seg_num index count
seg: 0 1 100
seg: 1 2 2
seg: 2 3 0
seg: 3 4 0
nr_seg: 4
total: 102

