#!/usr/bin/env expect

proc terminate {pid sid} {
    exec kill -KILL $pid
    wait -i $sid
    close -i $sid
}
proc finish {pid sid} {
    send -i $sid \x03  ;# ^C
    expect -i $sid -timeout 2 eof {} -re {^([^\r\n]*)[#>$] $} {
	send -i $sid exit\r  ;# got to shell prompt -- do exit
	expect -i $sid -timeout 2 eof {} timeout {terminate $pid $sid}
    } timeout {terminate $pid $sid}
}

# start a command and wait for shell prompt/eof
# return command output as raw multiline string
proc exec_cmd {pid sid cmd {tmout 10} {e 0}} {
    send -i $sid $cmd\n
    set r ""
    set t0 [timestamp]
    expect -i $sid -timeout $tmout -re {^([^\r\n]*\r*\n)} {
	append r $expect_out(1,string)
	exp_continue -continue_timer
    } -re {^(([^\r\n]*)[#>$] )$} {
	# got shell prompt
	if {"z$e" != "zwait_eof"} {return $r}
	append r $expect_out(1,string)
	exp_continue
    } timeout {finish $pid $sid; error timeout
    } eof {if {"z$e" == "zwait_eof"} {return $r} {error eof}}
}

# initialize a host and return [pid, spawn id] of ssh
proc init_host {addr {tmout 10}} {
    log_user 0
    if {"z$addr" == "zlocalhost"} {
	set pid [spawn bash]
    } else {
	set pid [spawn ssh $addr]
    }
    set sid $spawn_id
    set t0 [timestamp]
    expect -i $sid -timeout $tmout -re {^[^\r\n]*\r*\n} {
	exp_continue -continue_timer
    } -re {^([^\r\n]*\(yes/no\)\?) ?$} {
	send -i $sid yes\r
	exp_continue -continue_timer
    } -re {^([^\r\n]*([Pp]assword:|\(yes/no\)\?)) ?$} {
	set err $expect_out(1,string)
	finish $pid $sid
	error $err
    } -re {^([^\r\n]*)[#>$] $} {
	# got shell prompt
	return [list $pid $sid]
    } timeout {finish $pid $sid; error timeout
    } eof {error eof}
}

# returns 2 lists and 5 flattened arrays:
# 0. ihosts  - initialized hosts
# 1. ehosts  - error hosts
# 2. pid_al  - ssh pid
# 3. sid_al  - ssh spawn_id
# 4. nids_al - NIDs (there may be several NIDs per host)
proc init_hosts {consoles chosts shosts ntopts_al} {
    array set ntopts $ntopts_al
    # create list of unique addresses:
    set hosts ""
    foreach h [concat $consoles $chosts $shosts] {
	if {! [info exists u($h)]} {
	    set u($h) 1
	    lappend hosts $h
	}
    }
    # now initialize them serially:
    set ihosts ""
    set ehosts ""
    foreach h $hosts {
	if {[catch {
	    set r [init_host $h $ntopts(w)]
	    set pid($h) [lindex $r 0]
	    set sid($h) [lindex $r 1]
	    lappend ihosts $h
	} err]} {
	    # exception:
	    regsub {[ \t\r\n]*$} $err \n err
	    send_error "ERROR: $h: $err\n"
	    lappend ehosts $h
	}
    }
    # execute "date" on initialized hosts and "exit":
    foreach h $ihosts {
	foreach c [list "sudo lctl net down"\
	"sudo rmmod ksocklnd lnet"\
	"sudo modprobe lnet"\
	"sudo lctl net up"] {
	    exec_cmd $pid($h) $sid($h) $c $ntopts(w)
	}
	set r [exec_cmd $pid($h) $sid($h) "sudo lctl list_nids"\
	    $ntopts(w)]
	foreach l [split $r \n] {
	    if {[regexp {([0-9.]+)@([a-z0-9_]+)} $l a addr typ]
	    && "z$typ" == "z$ntopts(t)"} {
		lappend nids($h) [list $addr $typ]
	    }
	}
	if {! [info exists nids($h)]} {error "no NIDs found on $h"}
	# XXX: use the 1st element of the 1st NID
	set nid($h) [lindex [lindex $nids($h) 0] 0]
    }
    return [list $ihosts $ehosts [array get pid] [array get sid]\
	[array get nids]]
}

proc fini_hosts {ihosts pid_al sid_al tmout} {
    array set pid $pid_al
    array set sid $sid_al
    foreach h $ihosts {catch {
	exec_cmd $pid($h) $sid($h) "sudo lctl net down" $tmout
	exec_cmd $pid($h) $sid($h) "sudo rmmod ksocklnd lnet" $tmout
	exec_cmd $pid($h) $sid($h) exit $tmout wait_eof
    }}
}

proc main {argv0 argv} {
    package require cmdline
    set optdesc {
	{e.arg	  300	    "starting TMID for endpoints"}
	{o.arg	  42	    "portal"}
	{p.arg	  12345     "LNET pid"}
	{t.arg	  tcp	    "network type: tcp or o2ib"}
	{v		    "turn on verbose mode"}
	{w.arg	  10	    "ssh and commands' timeout"}
    }
    set usg "\[options\] clnt1\[,clnt2...\] srv1\[,...\] \[con1...\]"
    if {[catch {
	array set ntopts [::cmdline::getoptions argv $optdesc $usg]
	if {[llength $argv] < 2 || [llength $argv] > 3} {
	    error [::cmdline::usage $optdesc $usg]}
    } err]} {
	send_error "USAGE: $err"
	exit 1
    }
    set chosts [split [lindex $argv 0] ,]
    set shosts [split [lindex $argv 1] ,]
    if {[llength $argv] == 3} {set console [lindex $argv 2]} {
	set console localhost}
    set r [init_hosts [list $console] $chosts $shosts [array get ntopts]]
    array set nids [lindex $r 4]
    # list all NIDs
    foreach h [concat [list $console] $chosts $shosts] {
	if {[info exists nids($h)]} {
	    foreach n $nids($h) {
		send_user "$h [lindex $n 0]@[lindex $n 1]\n"
	    }
	}
    }
    fini_hosts [lindex $r 0] [lindex $r 2] [lindex $r 3] $ntopts(w)
}

main $argv0 $argv
# vi:set sw=4 noet tw=72 ft=tcl si:
